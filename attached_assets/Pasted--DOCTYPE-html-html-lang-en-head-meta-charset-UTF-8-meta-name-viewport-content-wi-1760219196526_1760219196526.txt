<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Brill Prime - Consumer Home</title>
  <link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css" />
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" />
  <style>
    * {
      margin: 0;
      padding: 0;
      box-sizing: border-box;
      font-family: 'Montserrat', sans-serif;
    }

    body {
      width: 100vw;
      height: 100vh;
      overflow: hidden;
      position: relative;
      background: #f5f5f5;
    }

    #map {
      width: 100%;
      height: 100%;
      z-index: 1;
    }

    /* Search Bar */
    .search-bar {
      position: absolute;
      top: 60px;
      left: 20px;
      right: 20px;
      background: white;
      border-radius: 25px;
      padding: 10px 20px;
      box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
      z-index: 1000;
      display: flex;
      align-items: center;
      gap: 10px;
    }

    .search-bar input {
      flex: 1;
      border: none;
      outline: none;
      font-size: 16px;
    }

    /* Buttons */
    .back-button, .menu-button {
      position: absolute;
      top: 50px;
      width: 40px;
      height: 40px;
      background: white;
      border-radius: 50%;
      display: flex;
      align-items: center;
      justify-content: center;
      box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
      z-index: 1000;
      cursor: pointer;
    }

    .back-button {
      left: 20px;
    }

    .menu-button {
      right: 20px;
    }

    /* Floating Card for Driver Tracking */
    .floating-card {
      position: absolute;
      bottom: 100px;
      left: 20px;
      right: 20px;
      background: white;
      border-radius: 15px;
      padding: 15px;
      box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1);
      z-index: 1000;
      display: none; /* Hidden by default */
    }

    .floating-card.active {
      display: block;
    }

    .driver-status {
      font-size: 16px;
      font-weight: bold;
      color: #006AFF;
      margin-bottom: 5px;
    }

    .distance-eta {
      font-size: 14px;
      color: #333;
    }

    /* Bottom Card for Location Setup */
    .bottom-card {
      position: absolute;
      bottom: 0;
      left: 0;
      right: 0;
      background: white;
      border-top-left-radius: 25px;
      border-top-right-radius: 25px;
      padding: 30px 20px 20px;
      box-shadow: 0 -5px 20px rgba(0, 0, 0, 0.1);
      z-index: 1000;
      text-align: center;
    }

    .location-icon {
      width: 60px;
      height: 60px;
      background: #006AFF;
      border-radius: 50%;
      margin: 0 auto 15px;
      display: flex;
      align-items: center;
      justify-content: center;
    }

    .where-text {
      font-size: 20px;
      font-weight: bold;
      color: #333;
      margin-bottom: 10px;
    }

    .description-text {
      font-size: 14px;
      color: #666;
      margin-bottom: 20px;
    }

    .set-location-button {
      background: #006AFF;
      color: white;
      border: none;
      border-radius: 25px;
      padding: 12px 20px;
      font-size: 16px;
      font-weight: 500;
      width: 100%;
      margin-bottom: 10px;
      cursor: pointer;
    }

    .set-later-button {
      background: transparent;
      color: #006AFF;
      border: 1px solid #006AFF;
      border-radius: 25px;
      padding: 12px 20px;
      font-size: 16px;
      font-weight: 500;
      width: 100%;
      cursor: pointer;
    }

    /* Notification */
    .notification {
      position: absolute;
      top: 20px;
      left: 20px;
      right: 20px;
      background: rgba(0, 0, 0, 0.8);
      color: white;
      padding: 15px;
      border-radius: 10px;
      text-align: center;
      z-index: 2000;
      display: none;
    }

    .notification.active {
      display: block;
    }
  </style>
</head>
<body>
  <!-- Map -->
  <div id="map"></div>

  <!-- Search Bar -->
  <div class="search-bar">
    <i class="fas fa-search"></i>
    <input type="text" placeholder="Search for merchants..." />
  </div>

  <!-- Back Button -->
  <div class="back-button">
    <i class="fas fa-arrow-left"></i>
  </div>

  <!-- Menu Button -->
  <div class="menu-button">
    <i class="fas fa-bars"></i>
  </div>

  <!-- Floating Card for Driver Tracking -->
  <div class="floating-card" id="floatingCard">
    <div class="driver-status" id="driverStatus">Driver is on the way to merchant</div>
    <div class="distance-eta" id="distanceETA">Distance: 2.5 km | ETA: 5 mins</div>
  </div>

  <!-- Bottom Card for Location Setup -->
  <div class="bottom-card" id="bottomCard">
    <div class="location-icon">
      <i class="fas fa-map-marker-alt" style="color: white; font-size: 24px;"></i>
    </div>
    <div class="where-text">Where are you?</div>
    <div class="description-text">Set your location to see nearby merchants</div>
    <button class="set-location-button" id="setLocationButton">Set Automatically</button>
    <button class="set-later-button" id="setLaterButton">Set Later</button>
  </div>

  <!-- Notification -->
  <div class="notification" id="notification">
    Driver has arrived at the merchant!
  </div>

  <!-- Leaflet JS -->
  <link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css" />
  <script src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js"></script>
  <!-- Leaflet Routing Machine for Directions -->
  <script src="https://unpkg.com/leaflet-routing-machine@3.2.12/dist/leaflet-routing-machine.js"></script>

  <script>
    // Initialize Map
    const map = L.map('map', {
      center: [9.0765, 7.3986], // Default to Lagos, Nigeria
      zoom: 13,
      zoomControl: false,
    });

    // Apply blue theme to the map (simulated)
    L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
      attribution: '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a>',
    }).addTo(map);

    // Custom blue marker icons
    const merchantIcon = L.icon({
      iconUrl: 'https://cdn-icons-png.flaticon.com/512/484/484167.png',
      iconSize: [30, 30],
    });

    const consumerIcon = L.icon({
      iconUrl: 'https://cdn-icons-png.flaticon.com/512/484/484149.png',
      iconSize: [30, 30],
    });

    const driverIcon = L.icon({
      iconUrl: 'https://cdn-icons-png.flaticon.com/512/2958/2958673.png', // Blue car icon
      iconSize: [30, 30],
    });

    // Sample locations
    const merchantLocation = [9.0765, 7.3986];
    const consumerLocation = [9.0850, 7.4050];
    let driverLocation = [9.0700, 7.3900];
    let driverMarker = null;
    let routeControl = null;
    let polyline = null;

    // Add merchant and consumer markers
    L.marker(merchantLocation, { icon: merchantIcon })
      .addTo(map)
      .bindPopup('Merchant Location');

    L.marker(consumerLocation, { icon: consumerIcon })
      .addTo(map)
      .bindPopup('Your Location');

    // Add driver marker
    driverMarker = L.marker(driverLocation, { icon: driverIcon })
      .addTo(map)
      .bindPopup('Driver');

    // Simulate driver movement
    let isTracking = false;
    let driverStatus = 'pickup'; // 'pickup' or 'delivery'
    let destination = merchantLocation;

    function startTracking() {
      isTracking = true;
      document.getElementById('floatingCard').classList.add('active');

      const interval = setInterval(() => {
        if (!isTracking) {
          clearInterval(interval);
          return;
        }

        // Simulate driver movement toward destination
        const latDiff = destination[0] - driverLocation[0];
        const lngDiff = destination[1] - driverLocation[1];
        const step = 0.0005; // Adjust for speed

        if (Math.abs(latDiff) < 0.001 && Math.abs(lngDiff) < 0.001) {
          // Driver arrived at destination
          clearInterval(interval);
          showNotification(
            driverStatus === 'pickup'
              ? 'Driver has arrived at the merchant!'
              : 'Driver has arrived at your location!'
          );

          // Switch destination to consumer after pickup
          if (driverStatus === 'pickup') {
            driverStatus = 'delivery';
            destination = consumerLocation;
            document.getElementById('driverStatus').textContent = 'Driver is on the way to you';
            setTimeout(startTracking, 2000); // Restart tracking after 2 sec
          }
          return;
        }

        // Move driver toward destination
        driverLocation[0] += latDiff > 0 ? step : -step;
        driverLocation[1] += lngDiff > 0 ? step : -step;
        driverMarker.setLatLng(driverLocation);

        // Update distance and ETA
        const distance = calculateDistance(driverLocation, destination);
        const eta = calculateETA(distance);
        document.getElementById('distanceETA').textContent =
          `Distance: ${distance.toFixed(1)} km | ETA: ${eta} mins`;

        // Update map view to include all locations
        const group = new L.FeatureGroup([
          L.marker(merchantLocation),
          L.marker(consumerLocation),
          L.marker(driverLocation),
        ]);
        map.fitBounds(group.getBounds().pad(0.5));

        // Draw route (simplified)
        if (polyline) map.removeLayer(polyline);
        polyline = L.polyline([driverLocation, destination], { color: '#006AFF' }).addTo(map);
      }, 1000); // Update every 1 second
    }

    // Calculate distance (Haversine formula)
    function calculateDistance(coord1, coord2) {
      const [lat1, lon1] = coord1;
      const [lat2, lon2] = coord2;
      const R = 6371; // Earth's radius in km
      const dLat = (lat2 - lat1) * (Math.PI / 180);
      const dLon = (lon2 - lon1) * (Math.PI / 180);
      const a =
        Math.sin(dLat / 2) * Math.sin(dLat / 2) +
        Math.cos(lat1 * (Math.PI / 180)) *
          Math.cos(lat2 * (Math.PI / 180)) *
          Math.sin(dLon / 2) *
          Math.sin(dLon / 2);
      const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));
      return R * c; // Distance in km
    }

    // Calculate ETA (minutes)
    function calculateETA(distance) {
      const speed = 30; // Average speed in km/h
      return Math.round((distance / speed) * 60);
    }

    // Show notification
    function showNotification(message) {
      const notification = document.getElementById('notification');
      notification.textContent = message;
      notification.classList.add('active');
      setTimeout(() => {
        notification.classList.remove('active');
      }, 3000);
    }

    // Start tracking when page loads
    document.getElementById('setLocationButton').addEventListener('click', () => {
      document.getElementById('bottomCard').style.display = 'none';
      startTracking();
    });

    // Set location later
    document.getElementById('setLaterButton').addEventListener('click', () => {
      document.getElementById('bottomCard').style.display = 'none';
    });
  </script>
</body>
</html>
